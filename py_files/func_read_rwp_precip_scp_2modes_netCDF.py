import numpy as np

from func_convert_netCDF_time_to_vector import func_convert_netCDF_time
from func_load_all_netCDF_variables import func_load_all_netCDF_variables


def func_read_rwp_precip_spc_2modes_netCDF(input_netCDF_filename, rwp_freq_MHz):

    class uazr:
        def __init__(self, Ncoh, ipp, Nspc, Npts, code_bits, pulse_length, range_resolution, Nyquist_vel, Vd, spc, timestamp, range_along_beam, lat, lon, alt):
            # number of coherent samples
            self.Ncoh = Ncoh
            # interpulse period 
            self.ipp = ipp
            # number of individual spectra per average spectrum # units = count
            self.Nspc = Nspc
            # number of points is spectra
            self.Npts = Npts
            # code bits
            self.code_bits = code_bits
            # transmitted pulse length
            self.pulse_length = pulse_length
            # range resolution
            self.range_resolution = range_resolution
            # Nyquist velocity # m/s
            self.Nyquist_vel = Nyquist_vel
            # Doppler velocity at each spectral bin
            self.Vd = Vd
            # spectral data # units = v^2
            self.spc_pop = spc
            # uzar timestamp array
            self.timestamp = timestamp
            # range gate values # in meters
            self.range = range_along_beam
            # North latitude # degree_N
            self.lat = lat
            # East Longitude # degree_E
            self.lon = lon
            # altitude above sea level # meters
            self.alt = alt

        # end def __init__
    # end class uazr: 
    
    #%% Cell: Change the operating frequency from MHz to Hz

    # force freq_Hz to be a float
    freq_Hz  =  1.0 * rwp_freq_MHz * 10**6

    #%% Cell: Read the raw spectra files in netCDF format
    
    # NetCDF file format
    # %             ncdisp(input_spc_filename)
    # % Source:
    # %            D:\Processing\UAZR\netCDF\sgp915rwpprecipspecC1.a0.20110520.000001.cdf
    # % Format:
    # %            classic
    # % Global Attributes:
    # %            command_line                              = 'rwp_ingest -n 915rwp -s sgp -f C1'
    # %            process_version                           = 'ingest-rwp-9.1-0.el5'
    # %            dod_version                               = '915rwpprecipspec-a0-1.0'
    # %            site_id                                   = 'sgp'
    # %            facility_id                               = 'C1: Lamont, Oklahoma'
    # %            input_source                              = '/data/collection/sgp/sgp915rwpC1.00/2011052000.spd'
    # %            sampling_interval                         = 'see sampr field'
    # %            averaging_interval                        = 'none'
    # %            serial_number                             = 'none'
    # %            resolution_description                    = 'The resolution field attributes refer to the number of significant digits relative to the decimal point that should be used in calculations. Using fewer digits might result in greater uncertainty. Using a larger number of digits should have no effect and thus is unnecessary. However, analyses based on differences in values with a larger number of significant digits than indicated could lead to erroneous results or misleading scientific conclusions.
    # %
    # %                                                        resolution for lat = 0.001
    # %                                                        resolution for lon = 0.001
    # %                                                        resolution for alt = 1'
    # %            comment                                   = 'The time stamp assigned to each data point indicates the BEGINNING of any period of averaging of the geophysical data.
    # %
    # %                                                        "blank_data" values are generated by the RWP when a value can not be determined. "missing_value" occurs when no RWP data exists for a given field.'
    # %            blank_data                                = '9999 or 999999'
    # %            frequency                                 = '915 MHz'
    # %            speed_of_propagation_of_light             = '3.0E8 m/s'
    # %            number_of_points_in_FFT                   = '128'
    # %            dcoffset_correction                       = '1 (1 = on, 0 = off)'
    # %            number_of_data_sets_in_mode               = '1'
    # %            max_range_gate_for_ground_clutter_removal = '12'
    # %            zeb_platform                              = 'sgp915rwpprecipspecC1.a0'
    # %            history                                   = 'created by user dsmgr on machine gold at 20-May-2011,4:08:13, using $State: zebra-zeblib-4.20-0.el5 $'
    # % Dimensions:
    # %            time       = 25623 (UNLIMITED)
    # %            range_gate = 75
    # %            bins       = 128
    # % Variables:
    # %     base_time
    # %            Size:       1x1
    # %            Dimensions:
    # %            Datatype:   int32
    # %            Attributes:
    # %                        string    = '20-May-2011,0:00:01 GMT'
    # %                        long_name = 'Base time in Epoch'
    # %                        units     = 'seconds since 1970-1-1 0:00:00 0:00'
    # %     time_offset
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   double
    # %            Attributes:
    # %                        long_name = 'Time offset from base_time'
    # %                        units     = 'seconds since 2011-05-20 00:00:01 0:00'
    # %     time
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   double
    # %            Attributes:
    # %                        long_name = 'Time offset from midnight'
    # %                        units     = 'seconds since 2011-05-20 00:00:00 0:00'
    # %     range_gate
    # %            Size:       75x1
    # %            Dimensions: range_gate
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name  = 'Height index'
    # %                        units      = 'index'
    # %                        resolution = 1
    # %     bins
    # %            Size:       128x1
    # %            Dimensions: bins
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name  = 'Spectral bin number'
    # %                        units      = 'unitless'
    # %                        resolution = 1
    # %     spc_amp
    # %            Size:       128x75x25623
    # %            Dimensions: bins,range_gate,time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Spectral data'
    # %                        units         = 'V^2'
    # %                        resolution    = 1
    # %                        missing_value = -9999
    # %     nheight
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Number of valid heights'
    # %                        units         = 'count'
    # %                        resolution    = 1
    # %                        missing_value = -9999
    # %     nspc
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Number of individual spectra per average spectrum'
    # %                        units         = 'count'
    # %                        resolution    = 1
    # %                        missing_value = -9999
    # %     rgf
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Height of center of first range gate'
    # %                        units         = 'km'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     rgl
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Height of center of last range gate'
    # %                        units         = 'km'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     dly
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Delay time to first gate'
    # %                        units         = 'us'
    # %                        resolution    = 0.001
    # %                        missing_value = -9999
    # %     prf
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Pulse repetition frequency'
    # %                        units         = 'kHz'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     spcavetime
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Average time per average spectra. Also know as dwell.'
    # %                        units         = 's'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     ncoh
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Number of coherent samples per spectral point'
    # %                        units         = 'count'
    # %                        resolution    = 1
    # %                        missing_value = -9999
    # %     plen
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Pulse length'
    # %                        units         = 'ns'
    # %                        resolution    = 1
    # %                        missing_value = -9999
    # %     ipp
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Interpulse period'
    # %                        units         = 'us'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     tditime
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Time domain integration time'
    # %                        units         = 'ms'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     bswitch
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Rx bandwidth switch code'
    # %                        units         = 'unitless'
    # %                        missing_value = -9999
    # %     sitime
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Individual spectrum integration time'
    # %                        units         = 's'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     rgs
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Range gate spacing'
    # %                        units         = 'm'
    # %                        resolution    = 1
    # %                        missing_value = -9999
    # %     sampr
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Sampling rate'
    # %                        units         = 'MHz'
    # %                        resolution    = 0.001
    # %                        missing_value = -9999
    # %     pcbits
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Number of pulse code bits'
    # %                        units         = 'count'
    # %                        missing_value = -9999
    # %     vband
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Vertical FFT bandwidth'
    # %                        units         = 'm/s'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     vsr
    # %            Size:       25623x1
    # %            Dimensions: time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Radial velocity spectral resolution'
    # %                        units         = 'm/s'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     height_t
    # %            Size:       75x25623
    # %            Dimensions: range_gate,time
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name     = 'Array of heights for each sample time'
    # %                        units         = 'km'
    # %                        resolution    = 0.01
    # %                        missing_value = -9999
    # %     lat
    # %            Size:       1x1
    # %            Dimensions:
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name = 'North latitude'
    # %                        units     = 'degree_N'
    # %                        valid_min = -90
    # %                        valid_max = 90
    # %     lon
    # %            Size:       1x1
    # %            Dimensions:
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name = 'East longitude'
    # %                        units     = 'degree_E'
    # %                        valid_min = -180
    # %                        valid_max = 180
    # %     alt
    # %            Size:       1x1
    # %            Dimensions:
    # %            Datatype:   single
    # %            Attributes:
    # %                        long_name = 'Altitude above mean sea level'
    # %                        units     = 'm'

    # Read in the netCDF data
    # print(
    #     f'...reading and seperating lo and hi precip modes in file: {input_netCDF_filename}...')

    # Load all variables.

    # These routines can not be functions because they load data
    # into the workspace and we don't know how many variables are
    # in the data files. These routines are hardwired to openthe file named in 'input_spc_filename'
    netCDF_dict = func_load_all_netCDF_variables(
        input_netCDF_filename)  # create a dictionary of arrays from netCDF file

    #     % The keys are:
    # %   alt                              1x1                            8  double
    # %   base_time                        1x1                            8  double
    # %   bins                           128x1                         1024  double
    # %   bswitch                      25623x1                       204984  double
    # %   dly                          25623x1                       204984  double
    # %   height_t                     25623x75                    15373800  double
    # %   ipp                          25623x1                       204984  double
    # %   lat                              1x1                            8  double
    # %   lon                              1x1                            8  double
    # %   ncoh                         25623x1                       204984  double
    # %   nheight                      25623x1                       204984  double
    # %   nspc                         25623x1                       204984  double
    # %   pcbits                       25623x1                       204984  double
    # %   plen                         25623x1                       204984  double
    # %   prf                          25623x1                       204984  double
    # %   range_gate                      75x1                          600  double
    # %   rgf                          25623x1                       204984  double
    # %   rgl                          25623x1                       204984  double
    # %   rgs                          25623x1                       204984  double
    # %   sampr                        25623x1                       204984  double
    # %   sitime                       25623x1                       204984  double
    # %   spc_amp                        128x75x25623            1967846400  double
    # %   spcavetime                   25623x1                       204984  double
    # %   tditime                      25623x1                       204984  double
    # %   time                         25623x1                       204984  double
    # %   time_offset                  25623x1                       204984  double
    # %   vband                        25623x1                       204984  double
    # %   vsr                          25623x1                       204984  double

    #%% Cell: Define time stamp
    
    # timestamp format [year month day dayofyear hour min sec millisec timefraction]
    uzar_time_stamp_array = func_convert_netCDF_time(
        netCDF_dict['base_time'], netCDF_dict['time_offset'])

    # Get the Stie attributes (lat = North latitude; lon = East longitude, alt = altitude above sea level)
    uazr_site_lat = netCDF_dict['lat']
    uazr_site_lon = netCDF_dict['lon']
    uazr_site_alt = netCDF_dict['alt']

    #%% Cell:  Divide the data into two modes defined by bswitch

    f_modeA = netCDF_dict['bswitch'][:] < 2
    f_modeB = netCDF_dict['bswitch'][:] > 2

    # find first occurance
    f_find_modeA = np.where(f_modeA)[0][0]
    f_find_modeB = np.where(f_modeB)[0][0]

    # gather hi and lo spectra
    spc_amp = np.array(netCDF_dict['spc_amp'][:])
    lo_spc_amp = spc_amp[f_modeA, :, :]
    hi_spc_amp = spc_amp[f_modeB, :, :]

    #%% Cell: get mode A data (lo mode)
    
    time_stamp_lo = uzar_time_stamp_array[f_modeA, :]
    lo_nheight = np.array(netCDF_dict['nheight'][f_find_modeA])
    lo_nspc = np.array(netCDF_dict['nspc'][f_find_modeA])
    lo_npts = np.array(len(netCDF_dict['bins']))
    lo_rgf = np.array(netCDF_dict['rgf'][f_find_modeA])
    lo_ncoh = np.array(netCDF_dict['ncoh'][f_find_modeA])
    lo_plen = np.array(netCDF_dict['plen'][f_find_modeA])
    lo_ipp = np.array(netCDF_dict['ipp'][f_find_modeA])
    lo_code_bits = np.array(netCDF_dict['pcbits'][f_find_modeA])
    lo_rgs = np.array(netCDF_dict['rgs'][f_find_modeA])

    #%% Cell: get mode B data (hi mode)
    
    time_stamp_hi = uzar_time_stamp_array[f_modeB, :]
    hi_nheight = np.array(netCDF_dict['nheight'][f_find_modeB])
    hi_nspc = np.array(netCDF_dict['nspc'][f_find_modeB])
    hi_npts = np.array(len(netCDF_dict['bins']))
    hi_rgf = np.array(netCDF_dict['rgf'][f_find_modeB])
    hi_ncoh = np.array(netCDF_dict['ncoh'][f_find_modeB])
    hi_plen = np.array(netCDF_dict['plen'][f_find_modeB])
    hi_ipp = np.array(netCDF_dict['ipp'][f_find_modeB])
    hi_code_bits = np.array(netCDF_dict['pcbits'][f_find_modeB])
    hi_rgs = np.array(netCDF_dict['rgs'][f_find_modeB])

    #%% Cell: Change the units of pulse length (plen) and ipp to be in seconds
    lo_plen     = lo_plen * (1e-9)
    lo_ipp      = lo_ipp * (1e-6)

    hi_plen     = hi_plen * (1e-9)
    hi_ipp      = hi_ipp * (1e-6)
    
    #%% Cell: Determine range gate spacing

    lo_range_list = []
    for r in range(int(lo_nheight)):
        lo_range_list.append(lo_rgf*1000 + r * lo_rgs)

    lo_range = np.array(lo_range_list)

    hi_range_list = []
    for r in range(int(hi_nheight)):
        hi_range_list.append(hi_rgf*1000 + r * hi_rgs)

    hi_range = np.array(hi_range_list)

    #%% Cell: Determine range resolution
    
    # calculate range resolution in meters
    # range_resolution = c*(uaz_pulse_length)/(2 * uaz_code_bits)
    #   uaz_code_bits == 0, is the same as uaz_code_bits == 1.

    # This code assumes that pulse_length is the baud rate and not the true 
    # pulse_length. Thus, ignore the code bits.
    
    lo_range_resolution  = (3e8)*(lo_plen) / (2)

    hi_range_resolution  = (3e8)*(hi_plen) / (2)
           
    #%% Cell: determine the Vd for both modes

    # If the netCDF file didn't include V_Nyquist, use this:
    # lambda = 29979245/freq; units m/s
    # V_Nyquist = (lambda/4) * (1/(nci*ipp));
    # estimate the change in velocity between bins
    # dVd = 2*V_Nyquist / npts; # npts is number of spectral bins

    # profiler constants
    #freq = 915e6  # Hz
    lamda = 299792458.0/freq_Hz  # m/s

    # Lo Mode
    # Nyquist lo
    V_Nyquist_lo = lamda/(4.0 * lo_ncoh * lo_ipp )

    # estimate change in velocity between bins
    dVd_lo = 2.0*V_Nyquist_lo/lo_npts

    # construct doppler velocity bins; DC value is in location (bins/2 + 1)
    Vdoppler_lo = np.arange(-V_Nyquist_lo, ((lo_npts) *
                                            dVd_lo) - V_Nyquist_lo, dVd_lo)

    # Set the DC value to zero, not 10^-15
    index = np.argmin(np.absolute(Vdoppler_lo))
    Vdoppler_lo[index] = 0.0

    # Hi Mode
    V_Nyquist_hi = lamda/(4.0 * hi_ncoh * hi_ipp)

    # estimate change in velocity between bins
    dVd_hi = 2.0 * V_Nyquist_hi/hi_npts

    # construct doppler velocity bins
    Vdoppler_hi = np.arange(-V_Nyquist_hi, ((hi_npts) *
                                            dVd_hi) - V_Nyquist_hi, dVd_hi)

    # Set the DC value to zero, not 10^-15
    index = np.argmin(np.absolute(Vdoppler_hi))
    Vdoppler_hi[index] = 0.0

    # --- #
    #%% Cell: Remove excess gates without data
    
    n_spc_gates = np.size(lo_spc_amp, 1)
    n_range_gates = len(lo_range)

    # remove bad data
    if n_spc_gates > n_range_gates:
        lo_spc_amp = np.delete(
            lo_spc_amp, slice(n_range_gates, n_spc_gates), axis=1)

    # hi mode
    n_spc_gates = np.size(hi_spc_amp, 1)
    n_range_gates = len(hi_range)

    # remove bad data
    if n_spc_gates > n_range_gates:
        hi_spc_amp = np.delete(
            hi_spc_amp, slice(n_range_gates, n_spc_gates), axis=1)

    # --- #
    #%% Cell: Get data ready for exporting
    
    # Generate uazr output object lo mode
    # def __init__(self, Ncoh, ipp, Nspc, Npts, pulse_length, Vd, spc, timestamp, range, lat, lon, alt)
    uazr_lo = uazr(lo_ncoh, lo_ipp, lo_nspc, lo_npts, lo_code_bits, lo_plen, 
                   lo_range_resolution, V_Nyquist_lo, Vdoppler_lo, lo_spc_amp,
                   time_stamp_lo, lo_range, uazr_site_lat, uazr_site_lon, uazr_site_alt)

    # Generate uazr output object hi mode
    # def __init__(self, Ncoh, ipp, Nspc, Npts, pulse_length, Vd, spc, timestamp, range, lat, lon, alt)
    uazr_hi = uazr(hi_ncoh, hi_ipp, hi_nspc, hi_npts, hi_code_bits, hi_plen, 
                   hi_range_resolution, V_Nyquist_hi, Vdoppler_hi, hi_spc_amp,
                   time_stamp_hi, hi_range, uazr_site_lat, uazr_site_lon, uazr_site_alt)

    #%% Cell: Return data to calling module
    
    return uazr_lo, uazr_hi
